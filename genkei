// firebase.js
import { initializeApp } from "firebase/app";
import { getAuth, GoogleAuthProvider } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Firebase の設定情報
const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_APP_ID",
};

// Firebase 初期化
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const provider = new GoogleAuthProvider();
export const db = getFirestore(app);

// store.js
import { create } from 'zustand';

// Zustand によるグローバル状態管理
export const useTaskStore = create((set) => ({
  tasks: [], // タスク一覧
  persona: 'military', // 初期人格設定
  setTasks: (tasks) => set({ tasks }),
  setPersona: (persona) => set({ persona }),
}));

// App.jsx
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import './index.css';

// アプリのルーティング設定
function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Login />} />
        <Route path="/dashboard" element={<Dashboard />} />
      </Routes>
    </Router>
  );
}

export default App;

// pages/Login.jsx
import { signInWithPopup } from 'firebase/auth';
import { auth, provider } from '../firebase';
import { useNavigate } from 'react-router-dom';

export default function Login() {
  const navigate = useNavigate();

  // Google ログイン処理
  const handleLogin = async () => {
    try {
      await signInWithPopup(auth, provider);
      navigate('/dashboard');
    } catch (err) {
      console.error(err);
    }
  };

  return (
    <div className="flex justify-center items-center h-screen bg-gray-100">
      <button onClick={handleLogin} className="px-4 py-2 bg-blue-500 text-white rounded">
        Googleでログイン
      </button>
    </div>
  );
}

// pages/Dashboard.jsx
import { useEffect, useState } from 'react';
import { signOut } from 'firebase/auth';
import { auth, db } from '../firebase';
import { useNavigate } from 'react-router-dom';
import { collection, addDoc, onSnapshot, query, serverTimestamp, deleteDoc, doc, getDoc, setDoc } from 'firebase/firestore';
import { useTaskStore } from '../store';

export default function Dashboard() {
  const [task, setTask] = useState('');
  const [deadline, setDeadline] = useState('');
  const { tasks, setTasks, persona, setPersona } = useTaskStore();
  const user = auth.currentUser;
  const navigate = useNavigate();

  // タスク一覧と人格設定の初期取得
  useEffect(() => {
    if (!user) return;
    const q = query(collection(db, 'users', user.uid, 'tasks'));
    const unsub = onSnapshot(q, (snapshot) => {
      const taskList = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      setTasks(taskList);
    });
    fetchPersona();
    return () => unsub();
  }, [user]);

  // Firestore からユーザーの人格設定を取得
  const fetchPersona = async () => {
    const ref = doc(db, 'users', user.uid, 'settings', 'persona');
    const snap = await getDoc(ref);
    if (snap.exists()) {
      setPersona(snap.data().type);
    }
  };

  // Firestore に人格設定を保存
  const savePersona = async (newPersona) => {
    const ref = doc(db, 'users', user.uid, 'settings', 'persona');
    await setDoc(ref, { type: newPersona });
    setPersona(newPersona);
  };

  // タスク追加処理
  const addTask = async () => {
    if (!task) return;
    await addDoc(collection(db, 'users', user.uid, 'tasks'), {
      text: task,
      deadline,
      created: serverTimestamp(),
    });
    // LINE通知を送信
    await sendLineNotification(task, deadline, persona);
    setTask('');
    setDeadline('');
  };

  // Cloud Function 経由で LINE 通知を送る
  const sendLineNotification = async (taskText, taskDeadline, userPersona) => {
    try {
      await fetch('https://your-cloud-function-url/sendNotification', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          uid: user.uid,
          persona: userPersona,
          text: taskText,
          deadline: taskDeadline
        })
      });
    } catch (err) {
      console.error('LINE通知エラー:', err);
    }
  };

  // タスク削除処理
  const removeTask = async (id) => {
    await deleteDoc(doc(db, 'users', user.uid, 'tasks', id));
  };

  // ログアウト処理
  const logout = async () => {
    await signOut(auth);
    navigate('/');
  };

  return (
    <div className="p-4 max-w-md mx-auto">
      <div className="flex justify-between mb-4">
        <h1 className="text-xl font-bold">ToDoリスト</h1>
        <button onClick={logout} className="text-red-500">ログアウト</button>
      </div>
      <div className="mb-4">
        {/* タスク入力フォーム */}
        <input
          type="text"
          value={task}
          onChange={(e) => setTask(e.target.value)}
          placeholder="タスク内容"
          className="border p-2 w-full mb-2"
        />
        <input
          type="datetime-local"
          value={deadline}
          onChange={(e) => setDeadline(e.target.value)}
          className="border p-2 w-full mb-2"
        />
        <button onClick={addTask} className="bg-green-500 text-white px-4 py-2 rounded">
          追加
        </button>
      </div>
      <div className="mb-4">
        {/* 人格キャラ選択 */}
        <label className="block mb-1 font-semibold">通知キャラ選択</label>
        <select
          value={persona}
          onChange={(e) => savePersona(e.target.value)}
          className="border p-2 w-full"
        >
          <option value="military">軍人系</option>
          <option value="yandere">病み系</option>
          <option value="cheerful">陽キャ系</option>
        </select>
      </div>
      {/* タスク一覧 */}
      <ul>
        {tasks.map((t) => (
          <li key={t.id} className="border p-2 mb-2 flex justify-between">
            <div>
              <p>{t.text}</p>
              <small>{t.deadline}</small>
            </div>
            <button onClick={() => removeTask(t.id)} className="text-red-500">削除</button>
          </li>
        ))}
      </ul>
    </div>
  );
}
